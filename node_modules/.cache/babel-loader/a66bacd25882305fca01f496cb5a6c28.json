{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ecomerce\\\\firebase-main\\\\src\\\\pages\\\\Doctor\\\\components\\\\Appointment.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useAuthValue } from '../../../context/AuthContext';\nimport { useState, useEffect } from 'react';\nimport { doc, getDoc, updateDoc, onSnapshot } from \"firebase/firestore\";\nimport { db } from '../../services/firebase-config';\nimport cancel from '../../images/cancel.jpg';\nimport DoctorNavbar from './DoctorNavbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Appointment = () => {\n  _s();\n\n  const {\n    currentUser\n  } = useAuthValue(); // Get the current user\n\n  const [loading, setLoading] = useState(true);\n  const [appointments, setAppointments] = useState([]);\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  const [patientTaget, setPatientTaget] = useState({\n    patientId: '',\n    date: '',\n    time: ''\n  });\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      try {\n        if (currentUser) {\n          const doctorDocRef = doc(db, 'doctor', currentUser.uid);\n          const unsubscribe = onSnapshot(doctorDocRef, doc => {\n            if (doc.exists()) {\n              const doctorData = doc.data();\n\n              if (doctorData.appointments) {\n                setAppointments(doctorData.appointments);\n              } else {\n                // Xử lý trường hợp không có trường 'appointments'\n                console.log('Không có dữ liệu cuộc hẹn nào.');\n              }\n            } else {\n              // Xử lý trường hợp tài liệu không tồn tại\n              console.log('Tài liệu người dùng không tồn tại.');\n            }\n\n            setLoading(false);\n          });\n          return () => unsubscribe();\n        }\n      } catch (error) {\n        console.error('Lỗi khi tải danh sách cuộc hẹn:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchAppointments();\n  }, [currentUser]);\n\n  const deleteUserAppointments = async (appointment, doctorId) => {\n    try {\n      const userRef = doc(db, 'users', appointment.patientId);\n      const userDoc = await getDoc(userRef);\n      const userAppointments = userDoc.data().appointments || [];\n      const updatedAppointments = userAppointments.filter(appt => appt.date !== appointment.date || appt.time !== appointment.time || appt.doctorId !== doctorId);\n      await updateDoc(userRef, {\n        appointments: updatedAppointments\n      });\n      console.log('user appointments deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting user appointments:', error);\n    }\n  };\n\n  const deleteAppointment = async appointment => {\n    try {\n      const doctorRef = doc(db, 'doctor', currentUser.uid);\n      const doctorDoc = await getDoc(doctorRef);\n      const doctorAppointments = doctorDoc.data().appointments || [];\n      const updatedAppointments = doctorAppointments.filter(appt => appt.date !== appointment.date || appt.time !== appointment.time || appt.doctorName !== appointment.doctorName);\n      await updateDoc(doctorRef, {\n        appointments: updatedAppointments\n      });\n      setAppointments(updatedAppointments); // Cập nhật danh sách cuộc hẹn cục bộ\n\n      console.log('Appointment deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting appointment:', error);\n    }\n  };\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'approve':\n        return 'green';\n\n      case 'pending':\n        return 'orange';\n\n      case 'reject':\n        return 'red';\n\n      default:\n        return 'black';\n      // Màu mặc định nếu trạng thái không được nhận diện\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 16\n    }, this);\n  } //\n\n\n  const isValid = (u, date, time) => {\n    // Check if there are existing appointments that match the provided date and time\n    const conflictingAppointment = u.appointments.find(appointment => appointment.date === date && appointment.time === time);\n\n    if (!conflictingAppointment) {\n      console.log('Appointment is valid');\n      return true;\n    } // If there is a conflicting appointment, it's invalid\n\n\n    console.log('Appointment is not valid');\n    return false;\n  };\n\n  const bookAppointment = async (e, date, time) => {\n    e.preventDefault();\n\n    try {\n      // Lấy tài liệu người dùng từ Firestore\n      const doctorRef = doc(db, 'doctor', currentUser.uid);\n      const patientRef = doc(db, 'users', patientTaget.patientId);\n      const patientDoc = await getDoc(patientRef);\n      const patientData = patientDoc.data(); // Dữ liệu hiện tại của người dùng\n      // Cập nhật hoặc thêm các trường mới vào tài liệu người dùng\n\n      const updatedDoctorAppointments = appointments.map(appointment => {\n        if (appointment.date === patientTaget.date && appointment.time === patientTaget.time) {\n          return { ...appointment,\n            date: date,\n            time: time,\n            reason: 're-examination'\n          };\n        }\n\n        return appointment;\n      }); // Cập nhật tài liệu người dùng với dữ liệu mới\n\n      await updateDoc(doctorRef, {\n        appointments: updatedDoctorAppointments\n      });\n\n      if (isValid(patientData, date, time)) {\n        const updatedPatientAppointments = patientData.appointments.map(appointment => {\n          if (appointment.date === patientTaget.date && appointment.time === patientTaget.time) {\n            return { ...appointment,\n              date: date,\n              time: time,\n              reason: 're-examination'\n            };\n          }\n\n          return appointment;\n        });\n        await updateDoc(patientRef, {\n          appointments: updatedPatientAppointments\n        });\n      } else {\n        console.log('Appointment is not valid');\n        return;\n      }\n\n      setAppointments(updatedDoctorAppointments); // Cập nhật danh sách cuộc hẹn cục bộ\n\n      console.log('Appointment updated successfully!');\n    } catch (error) {\n      console.error('Error updating appointment: ', error);\n    }\n  };\n\n  const openForm = e => {\n    setPatientTaget({\n      patientId: e.patientId,\n      date: e.date,\n      time: e.time\n    });\n    document.querySelector('.form-wrapper').style.display = 'block';\n  };\n\n  const closeForm = () => {\n    setPatientTaget({\n      patientId: '',\n      date: '',\n      time: ''\n    });\n    document.querySelector('.form-wrapper').style.display = 'none';\n  }; //\n\n\n  const setStatus = async (apt, status) => {\n    try {\n      // Lấy tài liệu người dùng từ Firestore\n      const doctorRef = doc(db, 'doctor', currentUser.uid);\n      const doctorDoc = await getDoc(doctorRef);\n      const doctorData = doctorDoc.data(); // Dữ liệu hiện tại của người dùng\n\n      const patientRef = doc(db, 'users', apt.patientId);\n      const patientDoc = await getDoc(patientRef);\n      const patientData = patientDoc.data(); // Dữ liệu hiện tại của người dùng\n\n      const updatedPatientAppointments = patientData.appointments.map(appointment => {\n        if (appointment.date === apt.date && appointment.time === apt.time) {\n          return { ...appointment,\n            status: status\n          };\n        }\n\n        return appointment;\n      });\n      await updateDoc(patientRef, {\n        appointments: updatedPatientAppointments\n      }); // Cập nhật hoặc thêm các trường mới vào tài liệu người dùng\n\n      const updatedDoctorAppointments = appointments.map(appointment => {\n        if (appointment.date === apt.date && appointment.time === apt.time) {\n          return { ...appointment,\n            status: status\n          };\n        }\n\n        return appointment;\n      });\n\n      if (doctorData.status === true && status === 'approve') {\n        await updateDoc(doctorRef, {\n          status: false\n        });\n      }\n\n      setAppointments(updatedDoctorAppointments); // Cập nhật danh sách cuộc hẹn cục bộ\n      // Cập nhật tài liệu người dùng với dữ liệu mới\n\n      await updateDoc(doctorRef, {\n        appointments: updatedDoctorAppointments\n      });\n      console.log('Appointment updated successfully!');\n    } catch (error) {\n      console.error('Error updating appointment: ', error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"appointment\",\n    children: [/*#__PURE__*/_jsxDEV(DoctorNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form-appointment\",\n          onSubmit: e => bookAppointment(e, date, time),\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: cancel,\n            alt: \"cancel\",\n            className: \"cancel\",\n            onClick: closeForm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Book an Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: date,\n            onChange: e => setDate(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: time,\n            onChange: e => setTime(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Book\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Patient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Reason\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: appointments.length > 0 ? appointments.map((appointment, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: appointment.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: appointment.time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"patientName\",\n              onClick: () => openForm(appointment),\n              children: appointment.patientName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: appointment.reason\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"status\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: appointment.status,\n                onChange: e => setStatus(appointment, e.target.value),\n                style: {\n                  color: getStatusColor(appointment.status)\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"pending\",\n                  children: \"pending\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"approve\",\n                  children: \"approve\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"reject\",\n                  children: \"reject\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  deleteAppointment(appointment);\n                  deleteUserAppointments(appointment, currentUser.uid);\n                },\n                disabled: appointment.status === 'approve',\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              colSpan: \"5\",\n              children: \"No appointments found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Appointment, \"rLrB2HM5mV3RCsYq0/lRvFu07yw=\", false, function () {\n  return [useAuthValue];\n});\n\n_c = Appointment;\nexport default Appointment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Appointment\");","map":{"version":3,"sources":["D:/Ecomerce/firebase-main/src/pages/Doctor/components/Appointment.js"],"names":["React","useAuthValue","useState","useEffect","doc","getDoc","updateDoc","onSnapshot","db","cancel","DoctorNavbar","Appointment","currentUser","loading","setLoading","appointments","setAppointments","date","setDate","time","setTime","patientTaget","setPatientTaget","patientId","fetchAppointments","doctorDocRef","uid","unsubscribe","exists","doctorData","data","console","log","error","deleteUserAppointments","appointment","doctorId","userRef","userDoc","userAppointments","updatedAppointments","filter","appt","deleteAppointment","doctorRef","doctorDoc","doctorAppointments","doctorName","getStatusColor","status","isValid","u","conflictingAppointment","find","bookAppointment","e","preventDefault","patientRef","patientDoc","patientData","updatedDoctorAppointments","map","reason","updatedPatientAppointments","openForm","document","querySelector","style","display","closeForm","setStatus","apt","target","value","length","index","patientName","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useAuthValue } from '../../../context/AuthContext';\nimport { useState, useEffect } from 'react';\nimport { doc, getDoc, updateDoc, onSnapshot } from \"firebase/firestore\";\nimport { db } from '../../services/firebase-config';\nimport cancel from '../../images/cancel.jpg'; \nimport DoctorNavbar from './DoctorNavbar';\n\n\nconst Appointment = () => {\n    const { currentUser } = useAuthValue(); // Get the current user\n    const [loading, setLoading] = useState(true);\n    const [appointments, setAppointments] = useState([]);\n    const [date, setDate] = useState('');\n    const [time, setTime] = useState('');\n    const [patientTaget, setPatientTaget] = useState({\n        patientId: '',\n        date: '',\n        time: ''\n    });\n\n\n    \n    useEffect(() => {\n        const fetchAppointments = async () => {\n          try {\n            if (currentUser) {\n              const doctorDocRef = doc(db, 'doctor', currentUser.uid);\n              const unsubscribe = onSnapshot(doctorDocRef, (doc) => {\n                if (doc.exists()) {\n                  const doctorData = doc.data();\n                  if (doctorData.appointments) {\n                    setAppointments(doctorData.appointments);\n                  } else {\n                    // Xử lý trường hợp không có trường 'appointments'\n                    console.log('Không có dữ liệu cuộc hẹn nào.');\n                  }\n                } else {\n                  // Xử lý trường hợp tài liệu không tồn tại\n                  console.log('Tài liệu người dùng không tồn tại.');\n                }\n                setLoading(false);\n              });\n              return () => unsubscribe();\n            }\n          } catch (error) {\n            console.error('Lỗi khi tải danh sách cuộc hẹn:', error);\n            setLoading(false);\n          }\n        };\n      \n        fetchAppointments();\n      }, [currentUser]);\n      \n\n    const deleteUserAppointments = async (appointment, doctorId) => {\n        try {\n            const userRef = doc(db, 'users', appointment.patientId);\n            const userDoc = await getDoc(userRef);\n            const userAppointments = userDoc.data().appointments || [];\n            const updatedAppointments = userAppointments.filter(appt => \n                appt.date !== appointment.date || \n                appt.time !== appointment.time || \n                appt.doctorId !== doctorId\n            );\n\n            await updateDoc(userRef, { appointments: updatedAppointments });\n            console.log('user appointments deleted successfully!');\n        } catch (error) {\n            console.error('Error deleting user appointments:', error);\n        }\n    };\n\n    const deleteAppointment = async (appointment) => {\n        try {\n            const doctorRef = doc(db, 'doctor', currentUser.uid);\n            const doctorDoc = await getDoc(doctorRef);\n            const doctorAppointments = doctorDoc.data().appointments || [];\n            const updatedAppointments = doctorAppointments.filter(appt => \n                appt.date !== appointment.date || \n                appt.time !== appointment.time || \n                appt.doctorName !== appointment.doctorName\n            );\n\n            await updateDoc(doctorRef, { appointments: updatedAppointments });\n            setAppointments(updatedAppointments); // Cập nhật danh sách cuộc hẹn cục bộ\n            console.log('Appointment deleted successfully!');\n        } catch (error) {\n            console.error('Error deleting appointment:', error);\n        }\n    };\n\n    const getStatusColor = (status) => {\n        switch (status) {\n            case 'approve':\n              return 'green';\n            case 'pending':\n              return 'orange';\n            case 'reject':\n              return 'red';\n            default:\n              return 'black'; // Màu mặc định nếu trạng thái không được nhận diện\n          }\n    };\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n    //\n    const isValid = (u, date, time) => {\n       \n        \n        // Check if there are existing appointments that match the provided date and time\n        const conflictingAppointment = u.appointments.find(appointment => appointment.date === date && appointment.time === time);\n        \n        if (!conflictingAppointment) {\n            console.log('Appointment is valid');\n            return true;\n        }\n    \n        // If there is a conflicting appointment, it's invalid\n        console.log('Appointment is not valid');\n        return false;\n    };\n\n    const bookAppointment = async (e, date, time) => {\n        e.preventDefault();\n        try {\n            // Lấy tài liệu người dùng từ Firestore\n            const doctorRef = doc(db, 'doctor', currentUser.uid);\n            const patientRef = doc(db, 'users', patientTaget.patientId);\n            const patientDoc = await getDoc(patientRef);\n            const patientData = patientDoc.data(); // Dữ liệu hiện tại của người dùng\n\n            // Cập nhật hoặc thêm các trường mới vào tài liệu người dùng\n            const updatedDoctorAppointments = appointments.map(appointment => {\n                if (appointment.date === patientTaget.date && appointment.time === patientTaget.time) {\n                    return {\n                        ...appointment,\n                        date: date,\n                        time: time,\n                        reason: 're-examination',\n                    };\n                }\n                return appointment;\n            });\n            \n            \n            // Cập nhật tài liệu người dùng với dữ liệu mới\n            await updateDoc(doctorRef, {appointments: updatedDoctorAppointments});\n\n            if (isValid( patientData, date, time)) {\n                const updatedPatientAppointments = patientData.appointments.map(appointment => {\n                    if (appointment.date === patientTaget.date && appointment.time === patientTaget.time) {\n                        return {\n                            ...appointment,\n                            date: date,\n                            time: time,\n                            reason: 're-examination',\n                        };\n                    }\n                    return appointment;\n                });\n\n                await updateDoc(patientRef, {appointments: updatedPatientAppointments});\n            } else {\n                console.log('Appointment is not valid');\n                return;\n            }\n\n            setAppointments(updatedDoctorAppointments); // Cập nhật danh sách cuộc hẹn cục bộ\n\n            console.log('Appointment updated successfully!');\n        } catch (error) {\n            console.error('Error updating appointment: ', error);\n        }\n    };\n\n    const openForm = (e) => {\n        setPatientTaget({patientId: e.patientId,\n            date: e.date,\n            time: e.time\n        });\n        document.querySelector('.form-wrapper').style.display = 'block';\n    };\n\n    const closeForm = () => {\n        setPatientTaget({patientId: '',\n        date: '',\n        time: ''});\n        document.querySelector('.form-wrapper').style.display = 'none';\n    };\n    //\n\n\n\n    const setStatus = async (apt, status) => {\n        try {\n            // Lấy tài liệu người dùng từ Firestore\n            const doctorRef = doc(db, 'doctor', currentUser.uid);\n            const doctorDoc = await getDoc(doctorRef);\n            const doctorData = doctorDoc.data(); // Dữ liệu hiện tại của người dùng\n            const patientRef = doc(db, 'users', apt.patientId);\n            const patientDoc = await getDoc(patientRef);\n            const patientData = patientDoc.data(); // Dữ liệu hiện tại của người dùng\n\n            const updatedPatientAppointments = patientData.appointments.map(appointment => {\n                if (appointment.date === apt.date && appointment.time === apt.time) {\n                    return {\n                        ...appointment,\n                        status: status\n                    };\n                }\n                return appointment;\n            });\n\n            await updateDoc(patientRef, {appointments: updatedPatientAppointments});\n           \n            // Cập nhật hoặc thêm các trường mới vào tài liệu người dùng\n            const updatedDoctorAppointments = appointments.map(appointment => {\n                if (appointment.date === apt.date && appointment.time === apt.time) {\n                    return {\n                        ...appointment,\n                        status: status\n                    };\n                }\n                return appointment;\n            });\n            \n            if(doctorData.status === true && status === 'approve'){\n                await updateDoc(doctorRef, {status: false});\n            }\n            setAppointments(updatedDoctorAppointments); // Cập nhật danh sách cuộc hẹn cục bộ\n            // Cập nhật tài liệu người dùng với dữ liệu mới\n            await updateDoc(doctorRef, {appointments: updatedDoctorAppointments});\n            console.log('Appointment updated successfully!');\n        } catch (error) {\n            console.error('Error updating appointment: ', error);\n        }\n    };\n\n\n\n    return (\n        \n        <div className=\"appointment\">\n            <DoctorNavbar />\n            <div className='form'>\n            <div className='form-wrapper'>\n                \n            <form className='form-appointment' onSubmit={(e) => bookAppointment(e, date, time)}>\n                <img src={cancel} alt='cancel' className='cancel' onClick={closeForm}/>\n                <h2>Book an Appointment</h2>\n                <input\n                    type='date'\n                    value={date}\n                    onChange={(e) => setDate(e.target.value)}\n                    required\n                />\n                <input\n                    type='time'\n                    value={time}\n                    onChange={(e) => setTime(e.target.value)}\n                    required\n                />\n                <button type='submit'>Book</button>\n            </form>\n\n            </div>\n        </div>\n\n        <div className='list'>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Date</th>\n                        <th>Time</th>\n                        <th>Patient</th>\n                        <th>Reason</th>\n                        <th>Status</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {appointments.length > 0 ? (\n                        appointments.map((appointment, index) => (\n                            <tr key={index} >\n                                <td>{appointment.date}</td>\n                                <td>{appointment.time}</td>\n                                <td className='patientName' onClick={() => openForm(appointment)}>{appointment.patientName}</td>\n                                <td>{appointment.reason}</td>\n                                <td className='status' >\n                                    <select value={appointment.status} onChange={(e) => setStatus(appointment, e.target.value)} style={{ color: getStatusColor(appointment.status) }}>\n                                        <option value=\"pending\">pending</option>\n                                        <option value=\"approve\">approve</option>\n                                        <option value=\"reject\">reject</option>\n                                    </select>\n                                </td>\n\n                                <td>\n                                    <button \n                                        onClick={() => {\n                                            deleteAppointment(appointment);\n                                            deleteUserAppointments(appointment, currentUser.uid);\n                                        }}\n                                        disabled={appointment.status === 'approve'}\n                                    >\n                                        Cancel\n                                    </button>\n                                </td>\n                            </tr>\n                        ))\n                    ) : (\n                        <tr>\n                            <td colSpan=\"5\">No appointments found</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        </div>\n            \n        </div>\n    );\n};\n\nexport default Appointment;"]},"metadata":{},"sourceType":"module"}