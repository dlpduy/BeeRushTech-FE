{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ecomerce\\\\firebase-main\\\\src\\\\pages\\\\Administrator\\\\components\\\\Contents\\\\ManageMedicines\\\\ManageMedicine.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { db } from '../../../../services/firebase-config';\nimport { collection, getDocs, addDoc, deleteDoc, updateDoc, doc } from 'firebase/firestore';\nimport './ManageMedicine.scss';\nimport Modal from './Modal/Modal';\nimport AdminNavbar from '../../AdminNavbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ManageMedicine = () => {\n  _s();\n\n  const [medicines, setMedicines] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [newMedicineDetails, setNewMedicineDetails] = useState({\n    name: '',\n    producer: '',\n    quantity: 0,\n    importDate: new Date().toISOString().split('T')[0]\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const medicinesCollectionRef = collection(db, 'medicines');\n  const [showDeleteAmountModal, setShowDeleteAmountModal] = useState(false);\n  const [deleteAmount, setDeleteAmount] = useState(0);\n  const [medicineToDelete, setMedicineToDelete] = useState(null);\n  useEffect(() => {\n    const getMedicines = async () => {\n      const data = await getDocs(medicinesCollectionRef);\n      setMedicines(data.docs.map(doc => ({ ...doc.data(),\n        id: doc.id\n      })));\n    };\n\n    getMedicines();\n  }, []);\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewMedicineDetails(prevDetails => ({ ...prevDetails,\n      [name]: value\n    }));\n  };\n\n  const handleAddNewMedicine = async e => {\n    e.preventDefault();\n    e.preventDefault();\n    const inputQuantity = parseInt(newMedicineDetails.quantity, 10);\n\n    if (isNaN(inputQuantity)) {\n      alert('Please enter a valid number for the quantity.');\n      return;\n    }\n\n    const existingMedicineIndex = medicines.findIndex(medicine => medicine.name === newMedicineDetails.name && medicine.producer === newMedicineDetails.producer && medicine.importDate === newMedicineDetails.importDate);\n\n    if (existingMedicineIndex !== -1) {\n      const existingMedicine = medicines[existingMedicineIndex];\n      const updatedQuantity = existingMedicine.quantity + inputQuantity;\n\n      try {\n        await updateDoc(doc(db, 'medicines', existingMedicine.id), {\n          quantity: updatedQuantity\n        });\n        const updatedMedicines = [...medicines];\n        updatedMedicines[existingMedicineIndex] = { ...existingMedicine,\n          quantity: updatedQuantity\n        };\n        setMedicines(updatedMedicines);\n      } catch (error) {\n        console.error('Error updating medicine quantity: ', error);\n      }\n    } else {\n      try {\n        const docRef = await addDoc(medicinesCollectionRef, { ...newMedicineDetails,\n          quantity: inputQuantity\n        });\n        setMedicines([...medicines, { ...newMedicineDetails,\n          id: docRef.id,\n          quantity: inputQuantity\n        }]);\n      } catch (error) {\n        console.error('Error adding new medicine: ', error);\n      }\n    }\n\n    setNewMedicineDetails({\n      name: '',\n      producer: '',\n      quantity: 0,\n      importDate: new Date().toISOString().split('T')[0]\n    });\n    setShowModal(false);\n  };\n\n  const deleteOneMedicine = async id => {\n    const medicine = medicines.find(m => m.id === id);\n\n    if (medicine.quantity > 1) {\n      await updateDoc(doc(db, 'medicines', id), {\n        quantity: medicine.quantity - 1\n      });\n      setMedicines(medicines.map(m => m.id === id ? { ...m,\n        quantity: m.quantity - 1\n      } : m));\n    } else {\n      await deleteDoc(doc(db, 'medicines', id));\n      setMedicines(medicines.filter(m => m.id !== id));\n    }\n  };\n\n  const deleteMedicineAmount = async (id, amount) => {\n    const amountToDelete = prompt('Enter the amount to delete:');\n    const amountNumber = Number(amountToDelete);\n\n    if (isNaN(amountNumber) || amountNumber <= 0) {\n      alert('Please enter a valid number greater than zero.');\n      return;\n    }\n\n    const medicineIndex = medicines.findIndex(m => m.id === id);\n    if (medicineIndex === -1) return;\n    const medicine = medicines[medicineIndex];\n\n    if (medicine.quantity > amountNumber) {\n      await updateDoc(doc(db, 'medicines', id), {\n        quantity: medicine.quantity - amountNumber\n      });\n      setMedicines(medicines.map(m => m.id === id ? { ...m,\n        quantity: m.quantity - amountNumber\n      } : m));\n    } else if (medicine.quantity === amountNumber) {\n      await deleteDoc(doc(db, 'medicines', id));\n      setMedicines(medicines.filter(m => m.id !== id));\n    } else {\n      alert(`Cannot delete ${amountNumber}. Only ${medicine.quantity} available.`);\n    }\n  };\n\n  const deleteAllMedicines = async id => {\n    await deleteDoc(doc(db, 'medicines', id));\n    setMedicines(medicines.filter(m => m.id !== id));\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  const handleSearchChange = e => {\n    setSearchTerm(e.target.value);\n  };\n\n  const filteredMedicines = searchTerm.trim() ? medicines.filter(medicine => medicine.name.toLowerCase().includes(searchTerm.trim().toLowerCase())) : medicines;\n\n  const handleDeleteAmount = medicineId => {\n    setMedicineToDelete(medicineId);\n    setShowDeleteAmountModal(true);\n  };\n\n  const submitDeleteAmount = async () => {\n    const amountNumber = parseInt(deleteAmount, 10);\n\n    if (isNaN(amountNumber) || amountNumber <= 0) {\n      alert('Please enter a valid number greater than zero.');\n      return;\n    }\n\n    if (!medicineToDelete) {\n      alert('No medicine selected to delete from.');\n      return;\n    }\n\n    const medicineIndex = medicines.findIndex(medicine => medicine.id === medicineToDelete);\n\n    if (medicineIndex === -1) {\n      alert('Medicine not found.');\n      return;\n    }\n\n    const medicine = medicines[medicineIndex];\n\n    if (medicine.quantity >= amountNumber) {\n      try {\n        await updateDoc(doc(db, 'medicines', medicineToDelete), {\n          quantity: medicine.quantity - amountNumber\n        });\n        const updatedMedicines = [...medicines];\n        updatedMedicines[medicineIndex] = { ...medicine,\n          quantity: medicine.quantity - amountNumber\n        };\n        setMedicines(updatedMedicines);\n      } catch (error) {\n        console.error('Error updating medicine quantity: ', error);\n      }\n    } else {\n      alert(`Cannot delete ${amountNumber}. Only ${medicine.quantity} available.`);\n    }\n\n    setShowDeleteAmountModal(false);\n    setDeleteAmount(0);\n    setMedicineToDelete(null);\n  };\n\n  const formatDate = dateString => {\n    const [year, month, day] = dateString.split('-');\n    return `${day}-${month}-${year}`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AdminNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"medicine-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-container\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search Medicine\",\n          value: searchTerm,\n          onChange: handleSearchChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowModal(true),\n        children: \"Add New Medicine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 7\n      }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        onClose: closeModal,\n        additionalClass: \"add-medicine-modal\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleAddNewMedicine,\n          className: \"medicine-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\",\n            placeholder: \"Name of the Medicine\",\n            value: newMedicineDetails.name,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"producer\",\n            children: \"Producer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"producer\",\n            name: \"producer\",\n            placeholder: \"Producer\",\n            value: newMedicineDetails.producer,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"quantity\",\n            children: \"Quantity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"quantity\",\n            name: \"quantity\",\n            placeholder: \"Quantity\",\n            value: newMedicineDetails.quantity,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"importDate\",\n            children: \"Import Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"importDate\",\n            name: \"importDate\",\n            value: newMedicineDetails.importDate,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"submit-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"cancel-button\",\n            onClick: closeModal,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 10\n      }, this), showDeleteAmountModal && /*#__PURE__*/_jsxDEV(Modal, {\n        onClose: () => setShowDeleteAmountModal(false),\n        additionalClass: \"delete-amount-modal\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => {\n            e.preventDefault();\n            submitDeleteAmount();\n          },\n          className: \"medicine-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"modal-title\",\n            children: \"Delete Medicine Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            className: \"input-field\",\n            placeholder: \"Enter amount to delete\",\n            value: deleteAmount,\n            onChange: e => setDeleteAmount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"cancel-button\",\n              onClick: () => setShowDeleteAmountModal(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"submit-button\",\n              children: \"Confirm Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"medicine-list\",\n        children: filteredMedicines.map(medicine => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"medicine-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"medicine-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"medicine-name\",\n              children: medicine.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"medicine-producer\",\n              children: [\"Producer: \", medicine.producer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"medicine-quantity\",\n              children: [\"Quantity: \", medicine.quantity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"medicine-import-date\",\n              children: [\"Import Date: \", formatDate(medicine.importDate)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"medicine-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-one\",\n              onClick: () => deleteOneMedicine(medicine.id),\n              children: \"Delete One\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-amount\",\n              onClick: () => handleDeleteAmount(medicine.id),\n              children: \"Delete Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-all\",\n              onClick: () => deleteAllMedicines(medicine.id),\n              children: \"Delete All\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)]\n        }, medicine.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ManageMedicine, \"VE4/oiWmNuqQxipxpEOJzggI3+M=\");\n\n_c = ManageMedicine;\nexport default ManageMedicine;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManageMedicine\");","map":{"version":3,"sources":["D:/Ecomerce/firebase-main/src/pages/Administrator/components/Contents/ManageMedicines/ManageMedicine.js"],"names":["React","useState","useEffect","db","collection","getDocs","addDoc","deleteDoc","updateDoc","doc","Modal","AdminNavbar","ManageMedicine","medicines","setMedicines","showModal","setShowModal","newMedicineDetails","setNewMedicineDetails","name","producer","quantity","importDate","Date","toISOString","split","searchTerm","setSearchTerm","medicinesCollectionRef","showDeleteAmountModal","setShowDeleteAmountModal","deleteAmount","setDeleteAmount","medicineToDelete","setMedicineToDelete","getMedicines","data","docs","map","id","handleInputChange","e","value","target","prevDetails","handleAddNewMedicine","preventDefault","inputQuantity","parseInt","isNaN","alert","existingMedicineIndex","findIndex","medicine","existingMedicine","updatedQuantity","updatedMedicines","error","console","docRef","deleteOneMedicine","find","m","filter","deleteMedicineAmount","amount","amountToDelete","prompt","amountNumber","Number","medicineIndex","deleteAllMedicines","closeModal","handleSearchChange","filteredMedicines","trim","toLowerCase","includes","handleDeleteAmount","medicineId","submitDeleteAmount","formatDate","dateString","year","month","day"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { db } from '../../../../services/firebase-config';\nimport {\n  collection,\n  getDocs,\n  addDoc,\n  deleteDoc,\n  updateDoc,\n  doc,\n} from 'firebase/firestore';\nimport './ManageMedicine.scss';\nimport Modal from './Modal/Modal';\nimport AdminNavbar from '../../AdminNavbar';\n\nconst ManageMedicine = () => {\n  const [medicines, setMedicines] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [newMedicineDetails, setNewMedicineDetails] = useState({\n    name: '',\n    producer: '',\n    quantity: 0,\n    importDate: new Date().toISOString().split('T')[0], \n  });\n  const [searchTerm, setSearchTerm] = useState('');\n  const medicinesCollectionRef = collection(db, 'medicines');\n  const [showDeleteAmountModal, setShowDeleteAmountModal] = useState(false);\n  const [deleteAmount, setDeleteAmount] = useState(0);\n  const [medicineToDelete, setMedicineToDelete] = useState(null);\n\n  useEffect(() => {\n    const getMedicines = async () => {\n      const data = await getDocs(medicinesCollectionRef);\n      setMedicines(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\n    };\n\n    getMedicines();\n  }, []);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewMedicineDetails((prevDetails) => ({\n      ...prevDetails,\n      [name]: value,\n    }));\n  };\n\n  const handleAddNewMedicine = async (e) => {\n    e.preventDefault();\n    e.preventDefault();\n    \n    const inputQuantity = parseInt(newMedicineDetails.quantity, 10);\n    if (isNaN(inputQuantity)) {\n      alert('Please enter a valid number for the quantity.');\n      return;\n    }\n  \n    const existingMedicineIndex = medicines.findIndex((medicine) => \n      medicine.name === newMedicineDetails.name && \n      medicine.producer === newMedicineDetails.producer && \n      medicine.importDate === newMedicineDetails.importDate\n    );\n  \n    if (existingMedicineIndex !== -1) {\n      const existingMedicine = medicines[existingMedicineIndex];\n      const updatedQuantity = existingMedicine.quantity + inputQuantity;\n      \n      try {\n        await updateDoc(doc(db, 'medicines', existingMedicine.id), {\n          quantity: updatedQuantity,\n        });\n\n        const updatedMedicines = [...medicines];\n        updatedMedicines[existingMedicineIndex] = {\n          ...existingMedicine,\n          quantity: updatedQuantity\n        };\n        setMedicines(updatedMedicines);\n      } catch (error) {\n        console.error('Error updating medicine quantity: ', error);\n      }\n    } else {\n      try {\n        const docRef = await addDoc(medicinesCollectionRef, {\n          ...newMedicineDetails,\n          quantity: inputQuantity\n        });\n        setMedicines([...medicines, { ...newMedicineDetails, id: docRef.id, quantity: inputQuantity }]);\n      } catch (error) {\n        console.error('Error adding new medicine: ', error);\n      }\n    }\n  \n    setNewMedicineDetails({ name: '', producer: '', quantity: 0, importDate: new Date().toISOString().split('T')[0] });\n    setShowModal(false);\n  };\n\n  const deleteOneMedicine = async (id) => {\n    const medicine = medicines.find((m) => m.id === id);\n    if (medicine.quantity > 1) {\n      await updateDoc(doc(db, 'medicines', id), {\n        quantity: medicine.quantity - 1,\n      });\n      setMedicines(medicines.map((m) => \n        m.id === id ? { ...m, quantity: m.quantity - 1 } : m\n      ));\n    } else {\n      await deleteDoc(doc(db, 'medicines', id));\n      setMedicines(medicines.filter((m) => m.id !== id));\n    }\n  };\n\n  const deleteMedicineAmount = async (id, amount) => {\n    const amountToDelete = prompt('Enter the amount to delete:');\n    const amountNumber = Number(amountToDelete);\n  \n    if (isNaN(amountNumber) || amountNumber <= 0) {\n      alert('Please enter a valid number greater than zero.');\n      return;\n    }\n  \n    const medicineIndex = medicines.findIndex((m) => m.id === id);\n    if (medicineIndex === -1) return; \n  \n    const medicine = medicines[medicineIndex];\n  \n    if (medicine.quantity > amountNumber) {\n      await updateDoc(doc(db, 'medicines', id), {\n        quantity: medicine.quantity - amountNumber,\n      });\n      setMedicines(medicines.map((m) => \n        m.id === id ? { ...m, quantity: m.quantity - amountNumber } : m\n      ));\n    } else if (medicine.quantity === amountNumber) {\n      await deleteDoc(doc(db, 'medicines', id));\n      setMedicines(medicines.filter((m) => m.id !== id));\n    } else {\n      alert(`Cannot delete ${amountNumber}. Only ${medicine.quantity} available.`);\n    }\n  };\n\n  const deleteAllMedicines = async (id) => {\n    await deleteDoc(doc(db, 'medicines', id));\n    setMedicines(medicines.filter((m) => m.id !== id));\n  };\n\n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const filteredMedicines = searchTerm.trim()\n    ? medicines.filter((medicine) =>\n        medicine.name.toLowerCase().includes(searchTerm.trim().toLowerCase())\n      )\n    : medicines;\n  \n  const handleDeleteAmount = (medicineId) => {\n    setMedicineToDelete(medicineId);\n    setShowDeleteAmountModal(true);\n  };\n  \n  const submitDeleteAmount = async () => {\n    const amountNumber = parseInt(deleteAmount, 10);\n    if (isNaN(amountNumber) || amountNumber <= 0) {\n      alert('Please enter a valid number greater than zero.');\n      return;\n    }\n  \n    if (!medicineToDelete) {\n      alert('No medicine selected to delete from.');\n      return;\n    }\n  \n    const medicineIndex = medicines.findIndex((medicine) => medicine.id === medicineToDelete);\n    if (medicineIndex === -1) {\n      alert('Medicine not found.');\n      return;\n    }\n  \n    const medicine = medicines[medicineIndex];\n    if (medicine.quantity >= amountNumber) {\n      try {\n        await updateDoc(doc(db, 'medicines', medicineToDelete), {\n          quantity: medicine.quantity - amountNumber\n        });\n  \n        const updatedMedicines = [...medicines];\n        updatedMedicines[medicineIndex] = {\n          ...medicine,\n          quantity: medicine.quantity - amountNumber\n        };\n        setMedicines(updatedMedicines);\n      } catch (error) {\n        console.error('Error updating medicine quantity: ', error);\n      }\n    } else {\n      alert(`Cannot delete ${amountNumber}. Only ${medicine.quantity} available.`);\n    }\n  \n    setShowDeleteAmountModal(false);\n    setDeleteAmount(0);\n    setMedicineToDelete(null);\n  };\n  \n  const formatDate = (dateString) => {\n    const [year, month, day] = dateString.split('-');\n    return `${day}-${month}-${year}`;\n  };\n\n  return (\n    <div>\n      <AdminNavbar />\n    <div className=\"medicine-container\">\n      \n      <div className=\"search-container\">\n        <input\n          type=\"text\"\n          placeholder=\"Search Medicine\"\n          value={searchTerm}\n          onChange={handleSearchChange}\n        />\n      </div>\n      <button onClick={() => setShowModal(true)}>Add New Medicine</button>\n\n      {showModal && (\n         <Modal onClose={closeModal} additionalClass=\"add-medicine-modal\">\n         <form onSubmit={handleAddNewMedicine} className=\"medicine-form\">\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            placeholder=\"Name of the Medicine\"\n            value={newMedicineDetails.name}\n            onChange={handleInputChange}\n          />\n      \n          <label htmlFor=\"producer\">Producer</label>\n          <input\n            type=\"text\"\n            id=\"producer\"\n            name=\"producer\"\n            placeholder=\"Producer\"\n            value={newMedicineDetails.producer}\n            onChange={handleInputChange}\n          />\n      \n          <label htmlFor=\"quantity\">Quantity</label>\n          <input\n            type=\"number\"\n            id=\"quantity\"\n            name=\"quantity\"\n            placeholder=\"Quantity\"\n            value={newMedicineDetails.quantity}\n            onChange={handleInputChange}\n          />\n      \n          <label htmlFor=\"importDate\">Import Date</label>\n          <input\n            type=\"date\"\n            id=\"importDate\"\n            name=\"importDate\"\n            value={newMedicineDetails.importDate}\n            onChange={handleInputChange}\n          />\n      \n          <button type=\"submit\" className=\"submit-button\">Submit</button>\n          <button type=\"button\" className=\"cancel-button\" onClick={closeModal}>Cancel</button>\n          </form>\n      </Modal>\n      )}\n      \n      {showDeleteAmountModal && (\n  <Modal onClose={() => setShowDeleteAmountModal(false)} additionalClass=\"delete-amount-modal\">\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      submitDeleteAmount();\n    }} className=\"medicine-form\">\n      <span className=\"modal-title\">Delete Medicine Amount</span>\n      <input\n        type=\"number\"\n        className=\"input-field\"\n        placeholder=\"Enter amount to delete\"\n        value={deleteAmount}\n        onChange={(e) => setDeleteAmount(e.target.value)}\n      />\n      <div className=\"modal-actions\">\n        <button type=\"button\" className=\"cancel-button\" onClick={() => setShowDeleteAmountModal(false)}>Cancel</button>\n        <button type=\"submit\" className=\"submit-button\">Confirm Delete</button>\n      </div>\n    </form>\n  </Modal>\n)}\n\n\n      <div className=\"medicine-list\">\n        {filteredMedicines.map((medicine) => (\n          <div key={medicine.id} className=\"medicine-item\">\n            <div className=\"medicine-info\">\n              <span className=\"medicine-name\">{medicine.name}</span>\n              <span className=\"medicine-producer\">\n                Producer: {medicine.producer}\n              </span>\n              <span className=\"medicine-quantity\">\n                Quantity: {medicine.quantity}\n              </span>\n              <span className=\"medicine-import-date\">\n                Import Date: {formatDate(medicine.importDate)}\n              </span>\n            </div>\n            <div className=\"medicine-actions\">\n              <button\n                className=\"delete-one\"\n                onClick={() => deleteOneMedicine(medicine.id)}\n              >\n                Delete One\n              </button>\n              <button className=\"delete-amount\" onClick={() => handleDeleteAmount(medicine.id)}>\n                Delete Amount\n              </button>\n              <button\n                className=\"delete-all\"\n                onClick={() => deleteAllMedicines(medicine.id)}\n              >\n                Delete All\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default ManageMedicine;\n"]},"metadata":{},"sourceType":"module"}