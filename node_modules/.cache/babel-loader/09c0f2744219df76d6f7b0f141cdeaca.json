{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ecomerce\\\\firebase-main\\\\src\\\\pages\\\\Patient\\\\components\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { db } from '../../services/firebase-config';\nimport { getDoc, updateDoc, doc } from \"firebase/firestore\"; // Import các biến và hàm từ Firebase Firestore\n\nimport { collection, query, getDocs } from \"firebase/firestore\";\nimport { useAuthValue } from '../../../context/AuthContext';\nimport cancel from '../../images/cancel.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppointmentA = () => {\n  _s();\n\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  const {\n    currentUser\n  } = useAuthValue();\n  const [reason, setReason] = useState('');\n\n  const isValid = (e, u, date, time) => {\n    if (e == null) {\n      console.log('Appointment this time is not valid');\n      return false;\n    } // Check if there are existing appointments that match the provided date and time\n\n\n    const conflictingAppointment = u.appointments.find(appointment => appointment.date === date && appointment.time === time);\n\n    if (!conflictingAppointment) {\n      console.log('Appointment is valid');\n      return true;\n    } // If there is a conflicting appointment, it's invalid\n\n\n    console.log('Appointment is not valid');\n    return false;\n  };\n\n  const bookAppointment = async e => {\n    e.preventDefault();\n\n    try {\n      // Lấy tài liệu người dùng từ Firestore\n      const userRef = doc(db, 'users', currentUser.uid);\n      const userDoc = await getDoc(userRef);\n      const userData = userDoc.data(); // Dữ liệu hiện tại của người dùng\n\n      const qDoctor = query(collection(db, 'doctor'));\n      const doctorsQuerySnapshot = await getDocs(qDoctor);\n      const doctorsFilter = doctorsQuerySnapshot.docs.filter(doc => doc.data().appointments == [] || doc.data().appointments.date !== date && doc.data().appointments.time !== time);\n      let minAppointmentsDoctor; // Loop through doctors to find the one with the fewest appointments\n\n      doctorsFilter.forEach(doc => {\n        const doctorData = doc.data();\n\n        if (!minAppointmentsDoctor || doctorData.appointments.length < minAppointmentsDoctor.appointments.length) {\n          minAppointmentsDoctor = { ...doctorData\n          };\n        }\n      });\n\n      if (isValid(minAppointmentsDoctor, userData, date, time)) {\n        const newAppointment = {\n          patientName: userData.username,\n          date: date,\n          time: time,\n          reason: reason,\n          // Make sure 'reason' is not undefined\n          status: 'pending',\n          patientId: currentUser.uid\n        };\n        minAppointmentsDoctor.appointments.push(newAppointment);\n        const docRef = doc(db, 'doctor', minAppointmentsDoctor.uid);\n        await updateDoc(docRef, minAppointmentsDoctor);\n      } else {\n        console.log('Appointment is not valid');\n        return;\n      } // Cập nhật hoặc thêm các trường mới vào tài liệu người dùng\n\n\n      const updatedUserData = { ...userData,\n        appointments: [...userData.appointments]\n      }; // Nếu mảng cuộc hẹn không rỗng, thêm cuộc hẹn mới vào cuối mảng\n\n      updatedUserData.appointments.push({\n        date: date,\n        time: time,\n        reason: reason,\n        // Make sure 'reason' is not undefined\n        status: 'pending',\n        doctorId: minAppointmentsDoctor.uid\n      }); // Cập nhật tài liệu người dùng với dữ liệu mới\n\n      await updateDoc(userRef, updatedUserData);\n      console.log('Appointment updated successfully!');\n    } catch (error) {\n      console.error('Error updating appointment: ', error);\n    }\n  };\n\n  const openForm = () => {\n    document.querySelector('.form-wrapper').style.display = 'block';\n  };\n\n  const closeForm = () => {\n    document.querySelector('.form-wrapper').style.display = 'none';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"new-appointment\",\n      onClick: openForm,\n      children: \"+ New Appointment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form-appointment\",\n        onSubmit: bookAppointment,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: cancel,\n          alt: \"cancel\",\n          className: \"cancel\",\n          onClick: closeForm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Book an Appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: date,\n          onChange: e => setDate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: time,\n          onChange: e => setTime(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: reason,\n          onChange: e => setReason(e.target.value),\n          placeholder: \"Reason for appointment\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppointmentA, \"xc2tTAOD0U0i2KnmBuNl+hprV98=\", false, function () {\n  return [useAuthValue];\n});\n\n_c = AppointmentA;\nexport default AppointmentA;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppointmentA\");","map":{"version":3,"sources":["D:/Ecomerce/firebase-main/src/pages/Patient/components/Form.js"],"names":["useState","db","getDoc","updateDoc","doc","collection","query","getDocs","useAuthValue","cancel","AppointmentA","date","setDate","time","setTime","currentUser","reason","setReason","isValid","e","u","console","log","conflictingAppointment","appointments","find","appointment","bookAppointment","preventDefault","userRef","uid","userDoc","userData","data","qDoctor","doctorsQuerySnapshot","doctorsFilter","docs","filter","minAppointmentsDoctor","forEach","doctorData","length","newAppointment","patientName","username","status","patientId","push","docRef","updatedUserData","doctorId","error","openForm","document","querySelector","style","display","closeForm","target","value"],"mappings":"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","sourcesContent":["import {  useState } from 'react';\nimport { db } from '../../services/firebase-config';\nimport { getDoc, updateDoc, doc } from \"firebase/firestore\"; // Import các biến và hàm từ Firebase Firestore\nimport { collection, query, getDocs } from \"firebase/firestore\";\nimport { useAuthValue } from '../../../context/AuthContext';\nimport cancel from '../../images/cancel.jpg'; \n\n\n\n\nconst AppointmentA = () => {\n    const [date, setDate] = useState('');\n    const [time, setTime] = useState('');\n    const { currentUser } = useAuthValue();\n    const [reason, setReason] = useState('');\n\n    \n\n    const isValid = (e, u, date, time) => {\n        if (e == null) {\n            console.log('Appointment this time is not valid');\n            return false;\n        }\n        \n        // Check if there are existing appointments that match the provided date and time\n        const conflictingAppointment = u.appointments.find(appointment => appointment.date === date && appointment.time === time);\n        \n        if (!conflictingAppointment) {\n            console.log('Appointment is valid');\n            return true;\n        }\n    \n        // If there is a conflicting appointment, it's invalid\n        console.log('Appointment is not valid');\n        return false;\n    };\n\n    const bookAppointment = async (e) => {\n        e.preventDefault();\n        try {\n            // Lấy tài liệu người dùng từ Firestore\n            const userRef = doc(db, 'users', currentUser.uid);\n            const userDoc = await getDoc(userRef);\n            const userData = userDoc.data(); // Dữ liệu hiện tại của người dùng\n            const qDoctor = query(collection(db, 'doctor'));\n            const doctorsQuerySnapshot = await getDocs(qDoctor);\n            const doctorsFilter = doctorsQuerySnapshot.docs.filter(doc =>doc.data().appointments == [] || (doc.data().appointments.date !== date && doc.data().appointments.time !== time));\n            \n            let minAppointmentsDoctor;\n\n            // Loop through doctors to find the one with the fewest appointments\n            doctorsFilter.forEach(doc => {\n                const doctorData = doc.data();\n                if (!minAppointmentsDoctor || doctorData.appointments.length < minAppointmentsDoctor.appointments.length) {\n                    minAppointmentsDoctor = {\n                        ...doctorData\n                    };\n                }\n            });\n\n\n            if (isValid(minAppointmentsDoctor, userData, date, time)) {\n                const newAppointment = {\n                    patientName: userData.username,\n                    date: date,\n                    time: time,\n                    reason: reason, // Make sure 'reason' is not undefined\n                    status: 'pending',\n                    patientId: currentUser.uid\n                };\n                minAppointmentsDoctor.appointments.push(newAppointment);\n                \n                const docRef = doc(db, 'doctor', minAppointmentsDoctor.uid);\n                await updateDoc(docRef, minAppointmentsDoctor);\n            } else {\n                console.log('Appointment is not valid');\n                return;\n            }\n\n            \n\n            \n\n            // Cập nhật hoặc thêm các trường mới vào tài liệu người dùng\n            const updatedUserData = {\n                ...userData,\n                appointments: [\n                    ...userData.appointments,\n                ]\n            };\n            \n            \n                // Nếu mảng cuộc hẹn không rỗng, thêm cuộc hẹn mới vào cuối mảng\n                updatedUserData.appointments.push({\n                    date: date,\n                    time: time,\n                    reason: reason, // Make sure 'reason' is not undefined\n                    status: 'pending',\n                    doctorId: minAppointmentsDoctor.uid\n                });\n            \n\n            // Cập nhật tài liệu người dùng với dữ liệu mới\n            await updateDoc(userRef, updatedUserData);\n\n            console.log('Appointment updated successfully!');\n        } catch (error) {\n            console.error('Error updating appointment: ', error);\n        }\n    };\n\n    const openForm = () => {\n        document.querySelector('.form-wrapper').style.display = 'block';\n    };\n\n    const closeForm = () => {\n        document.querySelector('.form-wrapper').style.display = 'none';\n    };\n\n    return (\n        <div className='form'>\n            <button className='new-appointment' onClick={openForm}>+ New Appointment</button>\n            <div className='form-wrapper'>\n                \n                <form className='form-appointment' onSubmit={bookAppointment}>\n                    <img src={cancel} alt='cancel' className='cancel' onClick={closeForm}/>\n                    <h2>Book an Appointment</h2>\n                    <input\n                        type='date'\n                        value={date}\n                        onChange={(e) => setDate(e.target.value)}\n                        required\n                    />\n                    <input\n                        type='time'\n                        value={time}\n                        onChange={(e) => setTime(e.target.value)}\n                        required\n                    />\n                    <input \n                        type='text'\n                        value={reason}\n                        onChange={(e) => setReason(e.target.value)}\n                        placeholder='Reason for appointment'\n                        required\n                    />\n                    <button type='submit'>Book</button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default AppointmentA;\n"]},"metadata":{},"sourceType":"module"}